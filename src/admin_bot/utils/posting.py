from aiogram import Bot, types
from shared.config import Config
from shared.utils.csv_handler import read_products, Product
from shared.utils.price_tracker import PriceTracker
from admin_bot.utils.text_utils import format_description
import asyncio
import logging
import random

async def auto_posting(bot: Bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    while True:
        try:
            products = read_products()
            available_products = [p for p in products if p.stock == 'instock']
            
            if available_products:
                product = random.choice(available_products)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_tracker = PriceTracker()
                price_diff = price_tracker.check_price_change(product.article, product.retail_price)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                text = f"üì¶ {product.name}\n\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 100 –≥—Ä–Ω
                if price_diff and price_diff >= 100:
                    text += f"üî• –ó–ù–ò–ñ–ö–ê! –°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: {product.retail_price + price_diff} –≥—Ä–Ω\n"
                    text += f"üí∞ –ù–æ–≤–∞ —Ü—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n"
                    text += f"üìâ –ï–∫–æ–Ω–æ–º—ñ—è: {price_diff} –≥—Ä–Ω!\n\n"
                else:
                    text += f"üí∞ –¶—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n\n"
                
                description = format_description(product.description)
                text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
                text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                valid_images = []
                if product.images:
                    for url in product.images[:10]:
                        if url.startswith(('http://', 'https://')):
                            clean_url = url.strip(' "\'\t\n\r')
                            valid_images.append(clean_url)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å ID —Ç–æ–≤–∞—Ä–∞
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üõç –ó–∞–º–æ–≤–∏—Ç–∏", 
                            callback_data=f"order_{product.article}"  # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                        )]
                    ]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                if valid_images:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
                        await bot.send_photo(
                            chat_id=Config.CHANNEL_ID,
                            photo=valid_images[0],
                            caption=text,
                            reply_markup=keyboard,
                            parse_mode='HTML'
                        )
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
                        if len(valid_images) > 1:
                            media = [types.InputMediaPhoto(media=url) for url in valid_images[1:]]
                            await bot.send_media_group(
                                chat_id=Config.CHANNEL_ID,
                                media=media
                            )
                            
                    except Exception as img_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(img_error)}")
                        await bot.send_message(
                            chat_id=Config.CHANNEL_ID,
                            text=text,
                            reply_markup=keyboard
                        )
                else:
                    await bot.send_message(
                        chat_id=Config.CHANNEL_ID,
                        text=text,
                        reply_markup=keyboard
                    )
                
                logging.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä {product.name}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(e)}")
        #—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è( —á–∞—Å—Ç–æ—Ç—É ) –ø–æ—Å—Ç–æ–≤  - 10 –º–∏–Ω—É—Ç
        await asyncio.sleep(Config.POST_INTERVAL)

async def check_and_delete_outdated_posts(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    while True:
        try:
            products = read_products()
            available_products = {p.article: p for p in products if p.stock == 'instock'}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages = await bot.get_updates(
                offset=-100,  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                allowed_updates=['channel_post']
            )
            
            for update in messages:
                if update.channel_post:
                    message = update.channel_post
                    try:
                        text = message.text or message.caption
                        if text:
                            for article in available_products.keys():
                                if article in text and article not in available_products:
                                    try:
                                        await bot.delete_message(
                                            chat_id=Config.CHANNEL_ID,
                                            message_id=message.message_id
                                        )
                                        logging.info(f"–£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç —Å —Ç–æ–≤–∞—Ä–æ–º {article}")
                                    except Exception as del_error:
                                        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(del_error)}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
        await asyncio.sleep(Config.UPDATE_INTERVAL)