from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from shared.utils.csv_handler import read_products, Product
from shared.utils.price_tracker import PriceTracker
import os
from typing import Optional, List
import logging
import re
import sys
from shared.utils.crm_handler import LpCrmAPI
import asyncio
from shared.config import Config
from admin_bot.context import context
from admin_bot.keyboards.admin_kb import get_admin_keyboard, get_settings_keyboard
from aiogram.types import CallbackQuery

router = Router(name='admin_handlers')

class ProductState:
    def __init__(self):
        self.current_product: Optional[Product] = None

class SettingsStates(StatesGroup):
    waiting_post_interval = State()
    waiting_csv_interval = State()
    waiting_post_format = State()

product_state = ProductState()
price_tracker = PriceTracker()
crm_api = LpCrmAPI()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id not in Config.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
        
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –∞–¥–º—ñ–Ω-–±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω–æ–º.",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = read_products()
        total_products = len(products)
        available_products = len([p for p in products if p.stock == 'instock'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–Ω
        price_stats = price_tracker.get_price_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        text += f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
        text += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {available_products}\n"
        text += f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {total_products - available_products}\n\n"
        
        if price_stats:
            text += "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n"
            text += f"üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω: {price_stats['increased']}\n"
            text += f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω: {price_stats['decreased']}\n"
            text += f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {price_stats['avg_discount']:.2f} –≥—Ä–Ω\n"
        
        await message.answer(text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def handle_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return
        
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
        f"‚è± –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å—Ç—ñ–≤: {Config.POST_INTERVAL // 60} —Ö–≤–∏–ª–∏–Ω\n"
        f"üîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV: {Config.UPDATE_INTERVAL // 3600} –≥–æ–¥–∏–Ω\n",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(lambda c: c.data and c.data.startswith('settings_'))
async def handle_settings_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if callback.from_user.id not in Config.ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", show_alert=True)
        return

    setting = callback.data.split('_')[1]
    
    if setting == 'post_interval':
        await callback.message.edit_text(
            "‚è± –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö (–≤—ñ–¥ 1 –¥–æ 1440):",
            reply_markup=None
        )
        await state.set_state(SettingsStates.waiting_post_interval)
    
    elif setting == 'csv_interval':
        await callback.message.edit_text(
            "üîÑ –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV –≤ –≥–æ–¥–∏–Ω–∞—Ö (–≤—ñ–¥ 1 –¥–æ 24):",
            reply_markup=None
        )
        await state.set_state(SettingsStates.waiting_csv_interval)
    
    elif setting == 'post_format':
        await callback.message.edit_text(
            "üìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –ø–æ—Å—Ç—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...",
            reply_markup=None
        )
    
    await callback.answer()

@router.message(SettingsStates.waiting_post_interval)
async def process_post_interval(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        interval = int(message.text)
        if 1 <= interval <= 1440:
            Config.POST_INTERVAL = interval * 60
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await message.answer(
                f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval} —Ö–≤–∏–ª–∏–Ω",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
        else:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 1440")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")

@router.message(SettingsStates.waiting_csv_interval)
async def process_csv_interval(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV"""
    try:
        interval = int(message.text)
        if 1 <= interval <= 24:
            Config.UPDATE_INTERVAL = interval * 3600
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await message.answer(
                f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è CSV –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval} –≥–æ–¥–∏–Ω",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
        else:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 24")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")

@router.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
async def handle_restart(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return
        
    try:
        await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ—Å—Ç–∞—Ä—Ç –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        
        await context.shutdown()
        
        python = sys.executable
        os.execv(python, [python] + sys.argv)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞")

@router.message(F.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∞")
async def handle_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    if message.from_user.id not in Config.ADMIN_IDS:
        return
        
    await state.clear()
    await message.answer(
        "üîÑ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=get_admin_keyboard()
    )
