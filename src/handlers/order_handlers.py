from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.crm_handler import LpCrmAPI
import logging
import asyncio

router = Router()
crm_api = LpCrmAPI()

class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_np = State()

async def create_order_keyboard(product_id: str) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üõç –ó–∞–º–æ–≤–∏—Ç–∏", 
                callback_data=f"order_{product_id}"
            )]
        ]
    )

@router.callback_query(lambda c: c.data.startswith('order_'))
async def process_order(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split('_')[1]
    await state.update_data(product_id=product_id)
    
    await callback.message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:"
    )
    await state.set_state(OrderStates.waiting_for_name)

@router.message(OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text
    if len(name.split()) < 2:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë (–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")
        return
        
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:")
    await state.set_state(OrderStates.waiting_for_phone)

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.replace('+', '').isdigit() or not (phone.startswith('+380') or phone.startswith('380')):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX")
        return
        
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:")
    await state.set_state(OrderStates.waiting_for_np)

@router.message(OrderStates.waiting_for_np)
async def process_np(message: types.Message, state: FSMContext):
    np_number = message.text
    data = await state.get_data()
    
    order_data = {
        'product_name': data.get('product_name'),
        'product_price': data.get('product_price'),
        'client_name': data['name'],
        'phone': data['phone'],
        'nova_poshta_office': np_number,
        'source': 'TG'
    }
    
    max_retries = 3
    retry_delay = 1
    
    for attempt in range(max_retries):
        try:
            result = await crm_api.create_order(order_data)
            if result:
                await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
                break
        except Exception as e:
            if attempt == max_retries - 1:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
                await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏.")
            else:
                await asyncio.sleep(retry_delay * (attempt + 1))
                continue
    
    await state.clear() 