from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.csv_handler import read_products, Product
import os
from typing import Optional, List
import random
import logging
import re
from utils.price_tracker import PriceTracker
from utils.crm_handler import LpCrmAPI
import asyncio

router = Router()

class ProductState:
    def __init__(self):
        self.current_product: Optional[Product] = None

product_state = ProductState()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Ü–µ–Ω
price_tracker = PriceTracker()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
crm_api = LpCrmAPI()

def format_description(description: str, max_length: int = 800) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram"""
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+', description)
    
    formatted_text = ''
    current_length = 0
    
    for sentence in sentences:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç
        if current_length + len(sentence) > max_length:
            if formatted_text:
                formatted_text = formatted_text.strip()
            break
        formatted_text += sentence + ' '
        current_length += len(sentence) + 1
        
    return formatted_text.strip()

@router.message(F.text == "üì¶ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä")
async def button_random_product(message: types.Message):
    await show_random_product(message)

@router.message(Command("random_product"))
async def show_random_product(message: types.Message):
    try:
        products = read_products()

        available_products = [p for p in products if p.stock == 'instock']
        
        if not available_products:
            await message.answer("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ")
            return
            
        product = random.choice(available_products)
        product_state.current_product = product
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = f"üì¶ {product.name}\n\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n"
        
        description = format_description(product.description)
        
        text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
        text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì§ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="post_product")]
            ]
        )
        
        if product.images:
            media = []
            for image_url in product.images[:10]:
                media.append(types.InputMediaPhoto(
                    media=image_url,
                    caption=text if len(media) == 0 else None
                ))
            await message.answer_media_group(media=media)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@router.callback_query(F.data == "post_product")
async def post_product(callback: types.CallbackQuery):
    try:
        if not product_state.current_product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CRM
        product_data = {
            'name': product_state.current_product.name,
            'article': product_state.current_product.article,
            'price': product_state.current_product.retail_price,
            'category': product_state.current_product.category,
            'description': product_state.current_product.description
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ CRM
        crm_result = await crm_api.send_order_to_crm(product_data)
        if crm_result:
            logging.info(f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ CRM: {crm_result}")
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ CRM
        product_data = {
            'name': product_state.current_product.name,
            'article': product_state.current_product.article,
            'price': product_state.current_product.retail_price,
            'category': product_state.current_product.category,
            'description': product_state.current_product.description
        }
        
        await crm_api.create_order(product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_diff = price_tracker.check_price_change(
            product_state.current_product.article, 
            product_state.current_product.retail_price
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = f"üì¶ {product_state.current_product.name}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 100 –≥—Ä–Ω
        if price_diff and price_diff >= 100:
            text += f"üî• –ó–ù–ò–ñ–ö–ê! –°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: {product_state.current_product.retail_price + price_diff} –≥—Ä–Ω\n"
            text += f"üí∞ –ù–æ–≤–∞ —Ü—ñ–Ω–∞: {product_state.current_product.retail_price} –≥—Ä–Ω\n"
            text += f"üìâ –ï–∫–æ–Ω–æ–º—ñ—è: {price_diff} –≥—Ä–Ω!\n\n"
        else:
            text += f"üí∞ –¶—ñ–Ω–∞: {product_state.current_product.retail_price} –≥—Ä–Ω\n"
        
        description = format_description(product_state.current_product.description)
        
        text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
        text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if product_state.current_product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        valid_images = []
        if product_state.current_product.images:
            for url in product_state.current_product.images[:10]:
                if url.startswith(('http://', 'https://')):
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
                    clean_url = url.strip(' "\'\t\n\r')
                    valid_images.append(clean_url)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üõç –ó–∞–º–æ–≤–∏—Ç–∏", 
                    callback_data=f"order_{product_state.current_product.article}"
                )]
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        if valid_images:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
                await callback.bot.send_photo(
                    chat_id=os.getenv('CHANNEL_ID'),
                    photo=valid_images[0],
                    caption=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
                if len(valid_images) > 1:
                    media = [types.InputMediaPhoto(media=url) for url in valid_images[1:]]
                    await callback.bot.send_media_group(
                        chat_id=os.getenv('CHANNEL_ID'),
                        media=media
                    )
                    
            except Exception as img_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(img_error)}")
                await callback.bot.send_message(
                    chat_id=os.getenv('CHANNEL_ID'),
                    text=text,
                    reply_markup=keyboard
                )
        else:
            await callback.bot.send_message(
                chat_id=os.getenv('CHANNEL_ID'),
                text=text,
                reply_markup=keyboard
            )
        
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ñ!")
        product_state.current_product = None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True) 