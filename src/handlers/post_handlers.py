from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.csv_handler import read_products, Product
import os
from typing import Optional
import random
import logging
import re

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
current_product: Optional[Product] = None

def format_description(description: str, max_length: int = 800) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram"""
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+', description)
    
    formatted_text = ''
    current_length = 0
    
    for sentence in sentences:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç
        if current_length + len(sentence) > max_length:
            if formatted_text:
                formatted_text = formatted_text.strip()
            break
        formatted_text += sentence + ' '
        current_length += len(sentence) + 1
        
    return formatted_text.strip()

@router.message(F.text == "üì¶ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä")
async def button_random_product(message: types.Message):
    await show_random_product(message)

@router.message(Command("random_product"))
async def show_random_product(message: types.Message):
    try:
        products = read_products()

        available_products = [p for p in products if p.stock == 'instock']
        
        if not available_products:
            await message.answer("‚ùå –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ")
            return
            
        product = random.choice(available_products)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = f"üì¶ {product.name}\n\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n"
        
        description = format_description(product.description)
        
        text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
        text += f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {product.category} / {product.subcategory}\n"
        text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üì§ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="post_product")]
            ]
        )
        
        global current_product
        current_product = product
        
        if product.images:
            media = []
            for image_url in product.images[:10]:
                media.append(types.InputMediaPhoto(
                    media=image_url,
                    caption=text if len(media) == 0 else None
                ))
            await message.answer_media_group(media=media)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

@router.callback_query(F.data == "post_product")
async def post_product(callback: types.CallbackQuery):
    try:
        if not current_product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", show_alert=True)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = f"üì¶ {current_product.name}\n\n"
        text += f"üí∞ –¶—ñ–Ω–∞: {current_product.retail_price} –≥—Ä–Ω\n"
        
        description = format_description(current_product.description)
        
        text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
        text += f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {current_product.category} / {current_product.subcategory}\n"
        text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if current_product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        valid_images = []
        if current_product.images:
            for url in current_product.images[:10]:
                if url.startswith(('http://', 'https://')):
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∞–≤—ã—á–∫–∏
                    clean_url = url.strip(' "\'\t\n\r')
                    valid_images.append(clean_url)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        if valid_images:
            try:
                media = []
                for image_url in valid_images:
                    media.append(types.InputMediaPhoto(
                        media=image_url,
                        caption=text if len(media) == 0 else None
                    ))
                await callback.bot.send_media_group(
                    chat_id=os.getenv('CHANNEL_ID'),
                    media=media
                )
            except Exception as img_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(img_error)}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.bot.send_message(
                    chat_id=os.getenv('CHANNEL_ID'),
                    text=text
                )
        else:
            await callback.bot.send_message(
                chat_id=os.getenv('CHANNEL_ID'),
                text=text
            )
        
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –≤ –∫–∞–Ω–∞–ª—ñ!")
        current_product = None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await callback.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True) 