import asyncio
import logging
import os
import signal
import sys
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from handlers.post_handlers import router, format_description
from utils.file_updater import FileUpdater
from utils.csv_handler import read_products
from utils.price_tracker import PriceTracker
from handlers.order_handlers import router as order_router
from utils.crm_handler import LpCrmAPI
from aiogram.client.session.aiohttp import AiohttpSession
from aiohttp import ClientTimeout, TCPConnector

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
PID_FILE = 'bot.pid'

def check_running():
    if os.path.exists(PID_FILE):
        with open(PID_FILE, 'r') as f:
            old_pid = int(f.read())
            try:
                os.kill(old_pid, 0)
                logging.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                sys.exit(1)
            except OSError:
                pass
    with open(PID_FILE, 'w') as f:
        f.write(str(os.getpid()))

def cleanup():
    if os.path.exists(PID_FILE):
        os.remove(PID_FILE)

# –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
dp.include_router(router)
dp.include_router(order_router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Ü–µ–Ω
price_tracker = PriceTracker()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CRM handler
crm = LpCrmAPI()

async def shutdown(dispatcher: Dispatcher):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in asyncio.all_tasks():
            if task is not asyncio.current_task():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await dispatcher.storage.close()
        await bot.session.close()
    finally:
        cleanup()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    try:
        asyncio.get_event_loop().run_until_complete(shutdown(dp))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")
    finally:
        cleanup()
        sys.exit(0)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"), types.KeyboardButton(text="üì¶ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä")],
                [types.KeyboardButton(text="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç"), types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [types.KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
async def button_restart(message: types.Message):
    if str(message.from_user.id) == os.getenv('ADMIN_ID'):
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            await shutdown(dp)
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É: {str(e)}")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@dp.message(F.text == "üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
async def button_start_work(message: types.Message):
    text = (
        "üî• –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —ó—Ö –≤ –∫–∞–Ω–∞–ª—ñ.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "üì¶ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–æ–≤–∞—Ä\n"
        "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)\n\n"
        "–©–æ–± –ø–æ—á–∞—Ç–∏, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é üëá"
    )
    await message.answer(text)

async def auto_posting():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        try:
            products = read_products()
            available_products = [p for p in products if p.stock == 'instock']
            
            if available_products:
                product = random.choice(available_products)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_diff = price_tracker.check_price_change(product.article, product.retail_price)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                text = f"üì¶ {product.name}\n\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 100 –≥—Ä–Ω
                if price_diff and price_diff >= 100:
                    text += f"üî• –ó–ù–ò–ñ–ö–ê! –°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: {product.retail_price + price_diff} –≥—Ä–Ω\n"
                    text += f"üí∞ –ù–æ–≤–∞ —Ü—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n"
                    text += f"üìâ –ï–∫–æ–Ω–æ–º—ñ—è: {price_diff} –≥—Ä–Ω!\n\n"
                else:
                    text += f"üí∞ –¶—ñ–Ω–∞: {product.retail_price} –≥—Ä–Ω\n"
                
                description = format_description(product.description)
                text += f"üìù –û–ø–∏—Å:\n{description}\n\n"
                text += f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if product.stock == 'instock' else '–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                valid_images = []
                if product.images:
                    for url in product.images[:10]:
                        if url.startswith(('http://', 'https://')):
                            clean_url = url.strip(' "\'\t\n\r')
                            valid_images.append(clean_url)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å ID —Ç–æ–≤–∞—Ä–∞
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üõç –ó–∞–º–æ–≤–∏—Ç–∏", 
                            callback_data=f"order_{product.article}"  # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                        )]
                    ]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                if valid_images:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
                        await bot.send_photo(
                            chat_id=os.getenv('CHANNEL_ID'),
                            photo=valid_images[0],
                            caption=text,
                            reply_markup=keyboard,
                            parse_mode='HTML'
                        )
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
                        if len(valid_images) > 1:
                            media = [types.InputMediaPhoto(media=url) for url in valid_images[1:]]
                            await bot.send_media_group(
                                chat_id=os.getenv('CHANNEL_ID'),
                                media=media
                            )
                            
                    except Exception as img_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(img_error)}")
                        await bot.send_message(
                            chat_id=os.getenv('CHANNEL_ID'),
                            text=text,
                            reply_markup=keyboard
                        )
                else:
                    await bot.send_message(
                        chat_id=os.getenv('CHANNEL_ID'),
                        text=text,
                        reply_markup=keyboard
                    )
                
                logging.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä {product.name}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(e)}")
            
        await asyncio.sleep(600)  # –ú–µ–Ω—è–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)

async def check_and_delete_outdated_posts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏"""
    while True:
        try:
            products = read_products()
            available_products = {p.article: p for p in products if p.stock == 'instock'}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ aiogram 3.x)
            messages = await bot.get_updates()
            for update in messages:
                if update.channel_post:
                    message = update.channel_post
                    try:
                        # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if message.text or message.caption:
                            text = message.text or message.caption
                            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞—Ä—Ç–∏–∫—É–ª —É–∫–∞–∑–∞–Ω –≤ —Ç–µ–∫—Å—Ç–µ
                            for article in available_products.keys():
                                if article in text and article not in available_products:
                                    # –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏, —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
                                    try:
                                        await bot.delete_message(
                                            chat_id=os.getenv('CHANNEL_ID'),
                                            message_id=message.message_id
                                        )
                                        logging.info(f"–£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç —Å —Ç–æ–≤–∞—Ä–æ–º {article} (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)")
                                    except Exception as del_error:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(del_error)}")
                                    break
                    except Exception as msg_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(msg_error)}")
                        continue
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}")
            
        await asyncio.sleep(172800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 2 –¥–Ω—è

async def main():
    try:
        check_running()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        bot.session = AiohttpSession()
        
        file_updater = FileUpdater(
            url="https://websklad.biz.ua/wp-content/uploads/ExportWebskladCSV.csv",
            local_path="src/ExportWebskladCSV.csv",
            update_interval=120
        )
        
        tasks = [
            asyncio.create_task(file_updater.check_updates()),
            asyncio.create_task(auto_posting()),
            asyncio.create_task(check_and_delete_outdated_posts())
        ]
        
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        await shutdown(dp)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        cleanup()
        raise

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    asyncio.run(main()) 